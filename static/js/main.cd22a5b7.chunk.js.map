{"version":3,"sources":["logo.svg","components/Key.js","keyList.js","components/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Key","_ref","keyItem","bank","power","volume","setDisplay","audioRef","useRef","playAudio","useCallback","current","play","useEffect","window","addEventListener","e","key","toLowerCase","audioSrcArray","split","audioName","length","react_default","a","createElement","Fragment","id","className","onClick","src","ref","keyList","keyCode","firstBank","secondBank","Keypad","_useState","useState","_useState2","Object","slicedToArray","keys","_useState3","_useState4","setVolume","_useState5","_useState6","display","onChange","target","value","type","min","max","map","components_Key","App","setPower","setBank","console","log","components_Keypad","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd22a5b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nconst Key = ({ keyItem, bank, power, volume, setDisplay }) => {\r\n  const audioRef = useRef(null);\r\n  const playAudio = useCallback(() => {\r\n    if (power) {\r\n      if (audioRef.current) {\r\n        audioRef.current.play();\r\n      }\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      audioRef.current.volume = volume / 10;\r\n    }\r\n    window.addEventListener('keydown', e => {\r\n      if (keyItem.key === e.key || keyItem.key === e.key.toLowerCase()) {\r\n        playAudio();\r\n      }\r\n    });\r\n  }, [bank, keyItem, keyItem.key, playAudio, volume]);\r\n  const audioSrcArray = keyItem[bank].split('/');\r\n  const audioName = audioSrcArray[audioSrcArray.length - 1];\r\n  const clickHandler = () => {\r\n    playAudio();\r\n    setDisplay(audioName.split('.')[0]);\r\n  };\r\n  return (\r\n    <>\r\n      <button\r\n        id={audioName.split('.')[0]}\r\n        className=\"drum-pad\"\r\n        onClick={clickHandler}\r\n      >\r\n        {keyItem.key}\r\n        <audio\r\n          id={keyItem.key}\r\n          className=\"clip\"\r\n          src={keyItem[bank]}\r\n          ref={audioRef}\r\n        />\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Key;\r\n","const keyList = [\r\n  {\r\n    keyCode: 81,\r\n    key: 'Q',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n  },\r\n  {\r\n    keyCode: 87,\r\n    key: 'W',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n  },\r\n  {\r\n    keyCode: 69,\r\n    key: 'E',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n  },\r\n  {\r\n    keyCode: 65,\r\n    key: 'A',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n  },\r\n  {\r\n    keyCode: 83,\r\n    key: 'S',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n  },\r\n  {\r\n    keyCode: 68,\r\n    key: 'D',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n  },\r\n  {\r\n    keyCode: 90,\r\n    key: 'Z',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n  },\r\n  {\r\n    keyCode: 88,\r\n    key: 'X',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n  },\r\n  {\r\n    keyCode: 67,\r\n    key: 'C',\r\n    firstBank: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\r\n    secondBank: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n  }\r\n];\r\n\r\nexport default keyList;\r\n","import React, { useState } from 'react';\r\nimport Key from './Key';\r\nimport keyList from '../keyList';\r\nconst Keypad = ({ bank, power }) => {\r\n  const [keys, setKeys] = useState(keyList);\r\n  const [volume, setVolume] = useState(1);\r\n  const [display, setDisplay] = useState('');\r\n  return (\r\n    <>\r\n      <div id=\"display\">{power ? display : ''}</div>\r\n      <input\r\n        className=\"volume-range\"\r\n        onChange={e => setVolume(e.target.value)}\r\n        type=\"range\"\r\n        min=\"1\"\r\n        max=\"10\"\r\n        value={volume}\r\n      />\r\n      <div className=\"keypad\">\r\n        {keys.length > 0\r\n          ? keyList.map(keyItem => (\r\n              <Key\r\n                setDisplay={setDisplay}\r\n                volume={volume}\r\n                key={keyItem.key}\r\n                keyItem={keyItem}\r\n                bank={bank}\r\n                power={power}\r\n              />\r\n            ))\r\n          : ''}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Keypad;\r\n","import React, { useState } from 'react';\nimport Keypad from './components/Keypad';\nimport logo from './logo.svg';\nimport './App.scss';\n\nconst App = () => {\n  const [power, setPower] = useState(true);\n  const [bank, setBank] = useState('firstBank');\n\n  const togglePower = () => {\n    console.log('power', power);\n    setPower(power => !power);\n  };\n  const toggleBank = () => {\n    const nextBank = bank === 'firstBank' ? 'secondBank' : 'firstBank';\n    setBank(nextBank);\n  };\n  return (\n    <div className=\"App\">\n      <div id=\"drum-machine\">\n        <button onClick={togglePower}>Power</button>\n        <button onClick={toggleBank}>Bank</button>\n        <Keypad bank={bank} power={power} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}